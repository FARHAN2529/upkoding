name: On Release (Test, build and push to DockerHub)

on:
  push:
    tags:
      - "*.*.*"

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # ==> build static files
      - uses: actions/setup-node@v2
        with:
          node-version: "14"

      - name: build static
        working-directory: _static
        run: npm install && npm run build

      # ==> collect static files
      - name: Cache dependency # caching dependency will make our build faster.
        uses: actions/cache@v2 # for more info checkout pip section documentation at https://github.com/actions/cache
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Setup python environment
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install requirements
        run: pip install -r requirements.txt

      - name: Run collectstatic
        run: python manage.py collectstatic --noinput

      # build image and push
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=${secrets.DOCKER_HUB_REPO}
          VERSION=${GITHUB_REF#refs/tags/v}
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:latest"
          fi
          echo ::set-output name=tags::${TAGS}

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./
          file: ./Dockerfile
          push: true
          tags: ${{ steps.prep.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
